
led_uart_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800309c  0800309c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080030a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000040  080030e4  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080030e4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b736  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001988  00000000  00000000  0002b79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b350  00000000  00000000  0002e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afc2  00000000  00000000  00049550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0bea  00000000  00000000  00054512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001050fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e44  00000000  00000000  0010514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002ff4 	.word	0x08002ff4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	08002ff4 	.word	0x08002ff4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 f9e2 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f836 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8ca 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f87a 	bl	8000724 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 10);
 8000630:	4914      	ldr	r1, [pc, #80]	; (8000684 <main+0x68>)
 8000632:	4815      	ldr	r0, [pc, #84]	; (8000688 <main+0x6c>)
 8000634:	230a      	movs	r3, #10
 8000636:	2232      	movs	r2, #50	; 0x32
 8000638:	f001 fc82 	bl	8001f40 <HAL_UART_Transmit>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_UART_Receive(&huart2, &rx_data, sizeof(rx_data), 10) == HAL_OK)
 800063c:	4913      	ldr	r1, [pc, #76]	; (800068c <main+0x70>)
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <main+0x6c>)
 8000640:	230a      	movs	r3, #10
 8000642:	2201      	movs	r2, #1
 8000644:	f001 fd20 	bl	8002088 <HAL_UART_Receive>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d1f7      	bne.n	800063c <main+0x20>
	  {
	  if(rx_data == '1')
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <main+0x70>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b31      	cmp	r3, #49	; 0x31
 8000652:	d105      	bne.n	8000660 <main+0x44>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <main+0x74>)
 8000656:	2201      	movs	r2, #1
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fc6a 	bl	8000f34 <HAL_GPIO_WritePin>
	  }
	  if (rx_data == '2')
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x70>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b32      	cmp	r3, #50	; 0x32
 8000666:	d105      	bne.n	8000674 <main+0x58>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <main+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fc60 	bl	8000f34 <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Transmit(&huart2, &rx_data, sizeof(rx_data), 10);
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <main+0x70>)
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0x6c>)
 8000678:	230a      	movs	r3, #10
 800067a:	2201      	movs	r2, #1
 800067c:	f001 fc60 	bl	8001f40 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart2, &rx_data, sizeof(rx_data), 10) == HAL_OK)
 8000680:	e7dc      	b.n	800063c <main+0x20>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000000 	.word	0x20000000
 8000688:	2000005c 	.word	0x2000005c
 800068c:	200000f0 	.word	0x200000f0
 8000690:	50000400 	.word	0x50000400

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	2414      	movs	r4, #20
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	233c      	movs	r3, #60	; 0x3c
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f002 fc9d 	bl	8002fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2310      	movs	r3, #16
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f002 fc96 	bl	8002fe4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fc57 	bl	8000f70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2240      	movs	r2, #64	; 0x40
 80006da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fc8f 	bl	8001008 <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ee:	f000 f8ab 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f000 ffda 	bl	80016c8 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000718:	f000 f896 	bl	8000848 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b015      	add	sp, #84	; 0x54
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_USART2_UART_Init+0x98>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fb90 	bl	8001e94 <HAL_UART_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f866 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fb2b 	bl	8002ddc <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f85d 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fb62 	bl	8002e5c <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f854 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x94>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fae0 	bl	8002d68 <HAL_UARTEx_DisableFifoMode>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f84c 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	2000005c 	.word	0x2000005c
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	240c      	movs	r4, #12
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f002 fc07 	bl	8002fe4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0x80>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_GPIO_Init+0x80>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x80>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x80>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_GPIO_Init+0x80>)
 80007f4:	2102      	movs	r1, #2
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_GPIO_Init+0x80>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	2202      	movs	r2, #2
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_GPIO_Init+0x84>)
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fb91 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <MX_GPIO_Init+0x84>)
 8000830:	0019      	movs	r1, r3
 8000832:	0010      	movs	r0, r2
 8000834:	f000 fa12 	bl	8000c5c <HAL_GPIO_Init>

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b009      	add	sp, #36	; 0x24
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	50000400 	.word	0x50000400

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0549      	lsls	r1, r1, #21
 800087c:	430a      	orrs	r2, r1
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_MspInit+0x44>)
 8000882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	4013      	ands	r3, r2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b09d      	sub	sp, #116	; 0x74
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	235c      	movs	r3, #92	; 0x5c
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fb98 	bl	8002fe4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	2410      	movs	r4, #16
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	234c      	movs	r3, #76	; 0x4c
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f002 fb90 	bl	8002fe4 <memset>
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xb8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d13e      	bne.n	800094c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2202      	movs	r2, #2
 80008d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 f89d 	bl	8001a1c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008e6:	f7ff ffaf 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0289      	lsls	r1, r1, #10
 80008f4:	430a      	orrs	r2, r1
 80008f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xbc>)
 80008fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	029b      	lsls	r3, r3, #10
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0xbc>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_UART_MspInit+0xbc>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0xbc>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	215c      	movs	r1, #92	; 0x5c
 8000920:	187b      	adds	r3, r7, r1
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	187a      	adds	r2, r7, r1
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f988 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b01d      	add	sp, #116	; 0x74
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f89c 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f7ff fff7 	bl	800098a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f002 faeb 	bl	8002f9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009c6:	f7ff fe29 	bl	800061c <main>

080009ca <LoopForever>:

LoopForever:
  b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80009d8:	080030a4 	.word	0x080030a4
  ldr r2, =_sbss
 80009dc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80009e0:	200000f8 	.word	0x200000f8

080009e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_COMP_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x3c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Init+0x3c>)
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	0049      	lsls	r1, r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 f810 	bl	8000a28 <HAL_InitTick>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff ff1e 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_InitTick+0x88>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d02b      	beq.n	8000a98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0x8c>)
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_InitTick+0x88>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	0019      	movs	r1, r3
 8000a4a:	23fa      	movs	r3, #250	; 0xfa
 8000a4c:	0098      	lsls	r0, r3, #2
 8000a4e:	f7ff fb59 	bl	8000104 <__udivsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	0020      	movs	r0, r4
 8000a58:	f7ff fb54 	bl	8000104 <__udivsi3>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f8ef 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d112      	bne.n	8000a8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d80a      	bhi.n	8000a84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 f8ce 	bl	8000c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_InitTick+0x90>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e00d      	b.n	8000aa0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e008      	b.n	8000aa0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e003      	b.n	8000aa0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b005      	add	sp, #20
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	2000003c 	.word	0x2000003c
 8000ab4:	20000034 	.word	0x20000034
 8000ab8:	20000038 	.word	0x20000038

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	18d2      	adds	r2, r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	2000003c 	.word	0x2000003c
 8000adc:	200000f4 	.word	0x200000f4

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	200000f4 	.word	0x200000f4

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b7f      	cmp	r3, #127	; 0x7f
 8000b08:	d828      	bhi.n	8000b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	33c0      	adds	r3, #192	; 0xc0
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	589b      	ldr	r3, [r3, r2]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5a:	e031      	b.n	8000bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	400b      	ands	r3, r1
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	3304      	adds	r3, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	400a      	ands	r2, r1
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	21ff      	movs	r1, #255	; 0xff
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	401a      	ands	r2, r3
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4003      	ands	r3, r0
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001c      	movs	r4, r3
 8000bac:	230f      	movs	r3, #15
 8000bae:	4023      	ands	r3, r4
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	18c3      	adds	r3, r0, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	045b      	lsls	r3, r3, #17
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d301      	bcc.n	8000be8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be4:	2301      	movs	r3, #1
 8000be6:	e010      	b.n	8000c0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <SysTick_Config+0x44>)
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff ff7c 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x44>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x44>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	210f      	movs	r1, #15
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	1c02      	adds	r2, r0, #0
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ffbf 	bl	8000bd0 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e14d      	b.n	8000f08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <HAL_GPIO_Init+0x28>
 8000c82:	e13e      	b.n	8000f02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	43da      	mvns	r2, r3
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	0013      	movs	r3, r2
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	2201      	movs	r2, #1
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	58d3      	ldr	r3, [r2, r3]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2207      	movs	r2, #7
 8000d58:	4013      	ands	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2107      	movs	r1, #7
 8000d72:	400b      	ands	r3, r1
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	6939      	ldr	r1, [r7, #16]
 8000d8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	23c0      	movs	r3, #192	; 0xc0
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_GPIO_Init+0x174>
 8000dce:	e098      	b.n	8000f02 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dd0:	4a53      	ldr	r2, [pc, #332]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589b      	ldr	r3, [r3, r2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	220f      	movs	r2, #15
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x1d6>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x1d2>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a47      	ldr	r2, [pc, #284]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x1ce>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x1ca>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a45      	ldr	r2, [pc, #276]	; (8000f30 <HAL_GPIO_Init+0x2d4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x1c6>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e32:	2300      	movs	r3, #0
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	2103      	movs	r1, #3
 8000e38:	400a      	ands	r2, r1
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e44:	4936      	ldr	r1, [pc, #216]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	035b      	lsls	r3, r3, #13
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e7c:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	039b      	lsls	r3, r3, #14
 8000e94:	4013      	ands	r3, r2
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000ea8:	2384      	movs	r3, #132	; 0x84
 8000eaa:	58d3      	ldr	r3, [r2, r3]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ecc:	4914      	ldr	r1, [pc, #80]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000ece:	2284      	movs	r2, #132	; 0x84
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	58d3      	ldr	r3, [r2, r3]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	40da      	lsrs	r2, r3
 8000f10:	1e13      	subs	r3, r2, #0
 8000f12:	d000      	beq.n	8000f16 <HAL_GPIO_Init+0x2ba>
 8000f14:	e6aa      	b.n	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021800 	.word	0x40021800
 8000f24:	50000400 	.word	0x50000400
 8000f28:	50000800 	.word	0x50000800
 8000f2c:	50000c00 	.word	0x50000c00
 8000f30:	50001000 	.word	0x50001000

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0011      	movs	r1, r2
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	1c7b      	adds	r3, r7, #1
 8000f48:	1c0a      	adds	r2, r1, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	1c7b      	adds	r3, r7, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	0019      	movs	r1, r3
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d11f      	bne.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	0013      	movs	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4912      	ldr	r1, [pc, #72]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff f8ae 	bl	8000104 <__udivsi3>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fae:	e008      	b.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e001      	b.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e009      	b.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	401a      	ands	r2, r3
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d0ed      	beq.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	fffff9ff 	.word	0xfffff9ff
 8000fe8:	20000034 	.word	0x20000034
 8000fec:	000f4240 	.word	0x000f4240

08000ff0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	23e0      	movs	r3, #224	; 0xe0
 8000ffa:	01db      	lsls	r3, r3, #7
 8000ffc:	4013      	ands	r3, r2
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 fb50 	bl	80016bc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_RCC_OscConfig+0x20>
 8001026:	e07c      	b.n	8001122 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001028:	4bc3      	ldr	r3, [pc, #780]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2238      	movs	r2, #56	; 0x38
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001032:	4bc1      	ldr	r3, [pc, #772]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2203      	movs	r2, #3
 8001038:	4013      	ands	r3, r2
 800103a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b10      	cmp	r3, #16
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x40>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d002      	beq.n	800104e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4bba      	ldr	r3, [pc, #744]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d062      	beq.n	8001120 <HAL_RCC_OscConfig+0x118>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d15e      	bne.n	8001120 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e32a      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	429a      	cmp	r2, r3
 8001070:	d107      	bne.n	8001082 <HAL_RCC_OscConfig+0x7a>
 8001072:	4bb1      	ldr	r3, [pc, #708]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4bb0      	ldr	r3, [pc, #704]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	0249      	lsls	r1, r1, #9
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e020      	b.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	02db      	lsls	r3, r3, #11
 800108a:	429a      	cmp	r2, r3
 800108c:	d10e      	bne.n	80010ac <HAL_RCC_OscConfig+0xa4>
 800108e:	4baa      	ldr	r3, [pc, #680]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4ba9      	ldr	r3, [pc, #676]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	02c9      	lsls	r1, r1, #11
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	4ba6      	ldr	r3, [pc, #664]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4ba5      	ldr	r3, [pc, #660]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0249      	lsls	r1, r1, #9
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 80010ac:	4ba2      	ldr	r3, [pc, #648]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4ba1      	ldr	r3, [pc, #644]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010b2:	49a2      	ldr	r1, [pc, #648]	; (800133c <HAL_RCC_OscConfig+0x334>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	4b9f      	ldr	r3, [pc, #636]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b9e      	ldr	r3, [pc, #632]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010be:	49a0      	ldr	r1, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x338>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d014      	beq.n	80010f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fd08 	bl	8000ae0 <HAL_GetTick>
 80010d0:	0003      	movs	r3, r0
 80010d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fd03 	bl	8000ae0 <HAL_GetTick>
 80010da:	0002      	movs	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	; 0x64
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e2e9      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e8:	4b93      	ldr	r3, [pc, #588]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0xce>
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fcf3 	bl	8000ae0 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fcee 	bl	8000ae0 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e2d4      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0xf8>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x126>
 800112c:	e099      	b.n	8001262 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2238      	movs	r2, #56	; 0x38
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001138:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
 8001140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b10      	cmp	r3, #16
 8001146:	d102      	bne.n	800114e <HAL_RCC_OscConfig+0x146>
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d002      	beq.n	8001154 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d135      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001154:	4b78      	ldr	r3, [pc, #480]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4013      	ands	r3, r2
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x164>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e2a7      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a74      	ldr	r2, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x33c>)
 8001172:	4013      	ands	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	021a      	lsls	r2, r3, #8
 800117c:	4b6e      	ldr	r3, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800117e:	430a      	orrs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d112      	bne.n	80011ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001188:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x340>)
 800118e:	4013      	ands	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800119c:	4b66      	ldr	r3, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0adb      	lsrs	r3, r3, #11
 80011a2:	2207      	movs	r2, #7
 80011a4:	4013      	ands	r3, r2
 80011a6:	4a69      	ldr	r2, [pc, #420]	; (800134c <HAL_RCC_OscConfig+0x344>)
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x348>)
 80011ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <HAL_RCC_OscConfig+0x34c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff fc38 	bl	8000a28 <HAL_InitTick>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d051      	beq.n	8001260 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e27d      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d030      	beq.n	800122a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x340>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	0019      	movs	r1, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b56      	ldr	r3, [pc, #344]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b55      	ldr	r3, [pc, #340]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0049      	lsls	r1, r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc79 	bl	8000ae0 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc74 	bl	8000ae0 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e25a      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4013      	ands	r3, r2
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_RCC_OscConfig+0x33c>)
 8001218:	4013      	ands	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	021a      	lsls	r2, r3, #8
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	e01b      	b.n	8001262 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001230:	4949      	ldr	r1, [pc, #292]	; (8001358 <HAL_RCC_OscConfig+0x350>)
 8001232:	400a      	ands	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fc53 	bl	8000ae0 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fc4e 	bl	8000ae0 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e234      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4013      	ands	r3, r2
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x238>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001260:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2208      	movs	r2, #8
 8001268:	4013      	ands	r3, r2
 800126a:	d047      	beq.n	80012fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2238      	movs	r2, #56	; 0x38
 8001272:	4013      	ands	r3, r2
 8001274:	2b18      	cmp	r3, #24
 8001276:	d10a      	bne.n	800128e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	d03c      	beq.n	80012fc <HAL_RCC_OscConfig+0x2f4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d138      	bne.n	80012fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e216      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800129c:	2101      	movs	r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc1d 	bl	8000ae0 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc18 	bl	8000ae0 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1fe      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d0f1      	beq.n	80012ac <HAL_RCC_OscConfig+0x2a4>
 80012c8:	e018      	b.n	80012fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80012cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	438a      	bics	r2, r1
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fc03 	bl	8000ae0 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbfe 	bl	8000ae0 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1e4      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d1f1      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	d100      	bne.n	8001308 <HAL_RCC_OscConfig+0x300>
 8001306:	e0c7      	b.n	8001498 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001308:	231f      	movs	r3, #31
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2238      	movs	r2, #56	; 0x38
 8001316:	4013      	ands	r3, r2
 8001318:	2b20      	cmp	r3, #32
 800131a:	d11f      	bne.n	800135c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_OscConfig+0x330>)
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d100      	bne.n	8001328 <HAL_RCC_OscConfig+0x320>
 8001326:	e0b7      	b.n	8001498 <HAL_RCC_OscConfig+0x490>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d000      	beq.n	8001332 <HAL_RCC_OscConfig+0x32a>
 8001330:	e0b2      	b.n	8001498 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c2      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40021000 	.word	0x40021000
 800133c:	fffeffff 	.word	0xfffeffff
 8001340:	fffbffff 	.word	0xfffbffff
 8001344:	ffff80ff 	.word	0xffff80ff
 8001348:	ffffc7ff 	.word	0xffffc7ff
 800134c:	00f42400 	.word	0x00f42400
 8001350:	20000034 	.word	0x20000034
 8001354:	20000038 	.word	0x20000038
 8001358:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800135c:	4bb5      	ldr	r3, [pc, #724]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800135e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	055b      	lsls	r3, r3, #21
 8001364:	4013      	ands	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x364>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x366>
 800136c:	2300      	movs	r3, #0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d011      	beq.n	8001396 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4bb0      	ldr	r3, [pc, #704]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001376:	4baf      	ldr	r3, [pc, #700]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0549      	lsls	r1, r1, #21
 800137c:	430a      	orrs	r2, r1
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001380:	4bac      	ldr	r3, [pc, #688]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	055b      	lsls	r3, r3, #21
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800138e:	231f      	movs	r3, #31
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <HAL_RCC_OscConfig+0x630>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	d11a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013a2:	4ba5      	ldr	r3, [pc, #660]	; (8001638 <HAL_RCC_OscConfig+0x630>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba4      	ldr	r3, [pc, #656]	; (8001638 <HAL_RCC_OscConfig+0x630>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0049      	lsls	r1, r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb96 	bl	8000ae0 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb91 	bl	8000ae0 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e177      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	4b9a      	ldr	r3, [pc, #616]	; (8001638 <HAL_RCC_OscConfig+0x630>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x3e6>
 80013e0:	4b94      	ldr	r3, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80013e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013e4:	4b93      	ldr	r3, [pc, #588]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x420>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x408>
 80013f6:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80013f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013fa:	4b8e      	ldr	r3, [pc, #568]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80013fc:	2104      	movs	r1, #4
 80013fe:	430a      	orrs	r2, r1
 8001400:	65da      	str	r2, [r3, #92]	; 0x5c
 8001402:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001406:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001408:	2101      	movs	r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	65da      	str	r2, [r3, #92]	; 0x5c
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x420>
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	65da      	str	r2, [r3, #92]	; 0x5c
 800141c:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800141e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001422:	2104      	movs	r1, #4
 8001424:	438a      	bics	r2, r1
 8001426:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d014      	beq.n	800145a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fb56 	bl	8000ae0 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001438:	e009      	b.n	800144e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb51 	bl	8000ae0 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a7d      	ldr	r2, [pc, #500]	; (800163c <HAL_RCC_OscConfig+0x634>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e136      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144e:	4b79      	ldr	r3, [pc, #484]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x432>
 8001458:	e013      	b.n	8001482 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fb41 	bl	8000ae0 <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001462:	e009      	b.n	8001478 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb3c 	bl	8000ae0 <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4a73      	ldr	r2, [pc, #460]	; (800163c <HAL_RCC_OscConfig+0x634>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e121      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800147a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001482:	231f      	movs	r3, #31
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800148e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001492:	496b      	ldr	r1, [pc, #428]	; (8001640 <HAL_RCC_OscConfig+0x638>)
 8001494:	400a      	ands	r2, r1
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2220      	movs	r2, #32
 800149e:	4013      	ands	r3, r2
 80014a0:	d039      	beq.n	8001516 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014aa:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	03c9      	lsls	r1, r1, #15
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fb12 	bl	8000ae0 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c2:	f7ff fb0d 	bl	8000ae0 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0f3      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014d4:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4ba>
 80014e0:	e019      	b.n	8001516 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014e2:	4b54      	ldr	r3, [pc, #336]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80014e8:	4956      	ldr	r1, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x63c>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff faf7 	bl	8000ae0 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f8:	f7ff faf2 	bl	8000ae0 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0d8      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x518>
 800151e:	e0cc      	b.n	80016ba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2238      	movs	r2, #56	; 0x38
 8001526:	4013      	ands	r3, r2
 8001528:	2b10      	cmp	r3, #16
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x526>
 800152c:	e07b      	b.n	8001626 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d156      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800153c:	4942      	ldr	r1, [pc, #264]	; (8001648 <HAL_RCC_OscConfig+0x640>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff facd 	bl	8000ae0 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fac8 	bl	8000ae0 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0ae      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	049b      	lsls	r3, r3, #18
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4a37      	ldr	r2, [pc, #220]	; (800164c <HAL_RCC_OscConfig+0x644>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	431a      	orrs	r2, r3
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800159a:	430a      	orrs	r2, r1
 800159c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0449      	lsls	r1, r1, #17
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	0549      	lsls	r1, r1, #21
 80015b6:	430a      	orrs	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fa91 	bl	8000ae0 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fa8c 	bl	8000ae0 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e072      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x5bc>
 80015e2:	e06a      	b.n	80016ba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 80015ea:	4917      	ldr	r1, [pc, #92]	; (8001648 <HAL_RCC_OscConfig+0x640>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa76 	bl	8000ae0 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fa71 	bl	8000ae0 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e057      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	049b      	lsls	r3, r3, #18
 8001614:	4013      	ands	r3, r2
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x62c>)
 800161e:	490c      	ldr	r1, [pc, #48]	; (8001650 <HAL_RCC_OscConfig+0x648>)
 8001620:	400a      	ands	r2, r1
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e049      	b.n	80016ba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d112      	bne.n	8001654 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e044      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	40007000 	.word	0x40007000
 800163c:	00001388 	.word	0x00001388
 8001640:	efffffff 	.word	0xefffffff
 8001644:	ffbfffff 	.word	0xffbfffff
 8001648:	feffffff 	.word	0xfeffffff
 800164c:	11c1808c 	.word	0x11c1808c
 8001650:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x6bc>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2203      	movs	r2, #3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	429a      	cmp	r2, r3
 8001666:	d126      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2270      	movs	r2, #112	; 0x70
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	23fe      	movs	r3, #254	; 0xfe
 800167a:	01db      	lsls	r3, r3, #7
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	23f8      	movs	r3, #248	; 0xf8
 800168c:	039b      	lsls	r3, r3, #14
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d10e      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	23e0      	movs	r3, #224	; 0xe0
 800169c:	051b      	lsls	r3, r3, #20
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	0f5b      	lsrs	r3, r3, #29
 80016ac:	075a      	lsls	r2, r3, #29
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	b008      	add	sp, #32
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0e9      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2207      	movs	r2, #7
 80016e2:	4013      	ands	r3, r2
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d91e      	bls.n	8001728 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2207      	movs	r2, #7
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016fc:	f7ff f9f0 	bl	8000ae0 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001704:	e009      	b.n	800171a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001706:	f7ff f9eb 	bl	8000ae0 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_RCC_ClockConfig+0x1f4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0ca      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2207      	movs	r2, #7
 8001720:	4013      	ands	r3, r2
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2202      	movs	r2, #2
 800172e:	4013      	ands	r3, r2
 8001730:	d015      	beq.n	800175e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2204      	movs	r2, #4
 8001738:	4013      	ands	r3, r2
 800173a:	d006      	beq.n	800174a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800173c:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001742:	21e0      	movs	r1, #224	; 0xe0
 8001744:	01c9      	lsls	r1, r1, #7
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <HAL_RCC_ClockConfig+0x1fc>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4b59      	ldr	r3, [pc, #356]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d057      	beq.n	8001818 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001770:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	4013      	ands	r3, r2
 800177a:	d12b      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e097      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d107      	bne.n	8001798 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	049b      	lsls	r3, r3, #18
 8001790:	4013      	ands	r3, r2
 8001792:	d11f      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e08b      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4013      	ands	r3, r2
 80017aa:	d113      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e07f      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b8:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e074      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e06d      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2207      	movs	r2, #7
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e8:	f7ff f97a 	bl	8000ae0 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	e009      	b.n	8001806 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff f975 	bl	8000ae0 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_RCC_ClockConfig+0x1f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e054      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2238      	movs	r2, #56	; 0x38
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	429a      	cmp	r2, r3
 8001816:	d1ec      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2207      	movs	r2, #7
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d21e      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2207      	movs	r2, #7
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001838:	f7ff f952 	bl	8000ae0 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001840:	e009      	b.n	8001856 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f94d 	bl	8000ae0 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_RCC_ClockConfig+0x1f4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e02c      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2207      	movs	r2, #7
 800185c:	4013      	ands	r3, r2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ee      	bne.n	8001842 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2204      	movs	r2, #4
 800186a:	4013      	ands	r3, r2
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_RCC_ClockConfig+0x200>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001882:	f000 f829 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001886:	0001      	movs	r1, r0
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	220f      	movs	r2, #15
 8001890:	401a      	ands	r2, r3
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x204>)
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	58d3      	ldr	r3, [r2, r3]
 8001898:	221f      	movs	r2, #31
 800189a:	4013      	ands	r3, r2
 800189c:	000a      	movs	r2, r1
 800189e:	40da      	lsrs	r2, r3
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_ClockConfig+0x208>)
 80018a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x20c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff f8bd 	bl	8000a28 <HAL_InitTick>
 80018ae:	0003      	movs	r3, r0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000
 80018bc:	00001388 	.word	0x00001388
 80018c0:	40021000 	.word	0x40021000
 80018c4:	fffff0ff 	.word	0xfffff0ff
 80018c8:	ffff8fff 	.word	0xffff8fff
 80018cc:	0800300c 	.word	0x0800300c
 80018d0:	20000034 	.word	0x20000034
 80018d4:	20000038 	.word	0x20000038

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2238      	movs	r2, #56	; 0x38
 80018e4:	4013      	ands	r3, r2
 80018e6:	d10f      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0adb      	lsrs	r3, r3, #11
 80018ee:	2207      	movs	r2, #7
 80018f0:	4013      	ands	r3, r2
 80018f2:	2201      	movs	r2, #1
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	4835      	ldr	r0, [pc, #212]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018fe:	f7fe fc01 	bl	8000104 <__udivsi3>
 8001902:	0003      	movs	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	e05d      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2238      	movs	r2, #56	; 0x38
 800190e:	4013      	ands	r3, r2
 8001910:	2b08      	cmp	r3, #8
 8001912:	d102      	bne.n	800191a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e054      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	2b10      	cmp	r3, #16
 8001924:	d138      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2203      	movs	r2, #3
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	3301      	adds	r3, #1
 800193c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	4824      	ldr	r0, [pc, #144]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001948:	f7fe fbdc 	bl	8000104 <__udivsi3>
 800194c:	0003      	movs	r3, r0
 800194e:	0019      	movs	r1, r3
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	227f      	movs	r2, #127	; 0x7f
 8001958:	4013      	ands	r3, r2
 800195a:	434b      	muls	r3, r1
 800195c:	617b      	str	r3, [r7, #20]
        break;
 800195e:	e00d      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	481c      	ldr	r0, [pc, #112]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001964:	f7fe fbce 	bl	8000104 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	0019      	movs	r1, r3
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	227f      	movs	r2, #127	; 0x7f
 8001974:	4013      	ands	r3, r2
 8001976:	434b      	muls	r3, r1
 8001978:	617b      	str	r3, [r7, #20]
        break;
 800197a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0f5b      	lsrs	r3, r3, #29
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	6978      	ldr	r0, [r7, #20]
 800198e:	f7fe fbb9 	bl	8000104 <__udivsi3>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e015      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2238      	movs	r2, #56	; 0x38
 800199e:	4013      	ands	r3, r2
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d103      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2238      	movs	r2, #56	; 0x38
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b18      	cmp	r3, #24
 80019b6:	d103      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019b8:	23fa      	movs	r3, #250	; 0xfa
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	e001      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019c4:	693b      	ldr	r3, [r7, #16]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b006      	add	sp, #24
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_RCC_GetHCLKFreq+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	20000034 	.word	0x20000034

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019f4:	f7ff fff2 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019f8:	0004      	movs	r4, r0
 80019fa:	f7ff faf9 	bl	8000ff0 <LL_RCC_GetAPB1Prescaler>
 80019fe:	0003      	movs	r3, r0
 8001a00:	0b1a      	lsrs	r2, r3, #12
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	58d3      	ldr	r3, [r2, r3]
 8001a08:	221f      	movs	r2, #31
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	40dc      	lsrs	r4, r3
 8001a0e:	0023      	movs	r3, r4
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bdb0      	pop	{r4, r5, r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	0800304c 	.word	0x0800304c

08001a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a24:	2313      	movs	r3, #19
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a40:	e0ad      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2011      	movs	r0, #17
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	055b      	lsls	r3, r3, #21
 8001a52:	4013      	ands	r3, r2
 8001a54:	d110      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	430a      	orrs	r2, r1
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0049      	lsls	r1, r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a86:	f7ff f82b 	bl	8000ae0 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7ff f826 	bl	8000ae0 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d904      	bls.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a9e:	2313      	movs	r3, #19
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
        break;
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0ed      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ab4:	2313      	movs	r3, #19
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d15e      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ac0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d019      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d014      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	430a      	orrs	r2, r1
 8001af0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001af8:	491e      	ldr	r1, [pc, #120]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2201      	movs	r2, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d016      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7fe ffe8 	bl	8000ae0 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b14:	e00c      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe ffe3 	bl	8000ae0 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d904      	bls.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b26:	2313      	movs	r3, #19
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	701a      	strb	r2, [r3, #0]
            break;
 8001b2e:	e004      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d0ed      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b3a:	2313      	movs	r3, #19
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b58:	e016      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b5a:	2312      	movs	r3, #18
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2213      	movs	r2, #19
 8001b60:	18ba      	adds	r2, r7, r2
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e00f      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	fffffcff 	.word	0xfffffcff
 8001b74:	fffeffff 	.word	0xfffeffff
 8001b78:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b7c:	2312      	movs	r3, #18
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2213      	movs	r2, #19
 8001b82:	18ba      	adds	r2, r7, r2
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b88:	2311      	movs	r3, #17
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4bb6      	ldr	r3, [pc, #728]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b96:	4bb5      	ldr	r3, [pc, #724]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001b98:	49b5      	ldr	r1, [pc, #724]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d009      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba8:	4bb0      	ldr	r3, [pc, #704]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	2203      	movs	r2, #3
 8001bae:	4393      	bics	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4bad      	ldr	r3, [pc, #692]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bc6:	4ba9      	ldr	r3, [pc, #676]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	220c      	movs	r2, #12
 8001bcc:	4393      	bics	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4ba5      	ldr	r3, [pc, #660]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001be4:	4ba1      	ldr	r3, [pc, #644]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	2230      	movs	r2, #48	; 0x30
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b9e      	ldr	r3, [pc, #632]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c02:	4b9a      	ldr	r3, [pc, #616]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	4a9b      	ldr	r2, [pc, #620]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	4b96      	ldr	r3, [pc, #600]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	015b      	lsls	r3, r3, #5
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d009      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001c22:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	4a94      	ldr	r2, [pc, #592]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c42:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	4a8d      	ldr	r2, [pc, #564]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c50:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	4a86      	ldr	r2, [pc, #536]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	4b7e      	ldr	r3, [pc, #504]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	4b77      	ldr	r3, [pc, #476]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	01db      	lsls	r3, r3, #7
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d015      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	0899      	lsrs	r1, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cca:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cdc:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0249      	lsls	r1, r1, #9
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	039b      	lsls	r3, r3, #14
 8001d12:	4013      	ands	r3, r2
 8001d14:	d016      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d16:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	4a5c      	ldr	r2, [pc, #368]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d24:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	03db      	lsls	r3, r3, #15
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d106      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d36:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	0449      	lsls	r1, r1, #17
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	03db      	lsls	r3, r3, #15
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d016      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	045b      	lsls	r3, r3, #17
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	0449      	lsls	r1, r1, #17
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d014      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	0249      	lsls	r1, r1, #9
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d014      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d106      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0249      	lsls	r1, r1, #9
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	045b      	lsls	r3, r3, #17
 8001df2:	4013      	ands	r3, r2
 8001df4:	d016      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d106      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	0449      	lsls	r1, r1, #17
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	049b      	lsls	r3, r3, #18
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d016      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0449      	lsls	r1, r1, #17
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	efffffff 	.word	0xefffffff
 8001e74:	fffff3ff 	.word	0xfffff3ff
 8001e78:	fffffcff 	.word	0xfffffcff
 8001e7c:	fff3ffff 	.word	0xfff3ffff
 8001e80:	ffcfffff 	.word	0xffcfffff
 8001e84:	ffffcfff 	.word	0xffffcfff
 8001e88:	ffff3fff 	.word	0xffff3fff
 8001e8c:	ffbfffff 	.word	0xffbfffff
 8001e90:	feffffff 	.word	0xfeffffff

08001e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e046      	b.n	8001f34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2288      	movs	r2, #136	; 0x88
 8001eaa:	589b      	ldr	r3, [r3, r2]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2284      	movs	r2, #132	; 0x84
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7fe fcee 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2288      	movs	r2, #136	; 0x88
 8001ec4:	2124      	movs	r1, #36	; 0x24
 8001ec6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fd0c 	bl	8002900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f9b2 	bl	8002254 <UART_SetConfig>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01c      	b.n	8001f34 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	490d      	ldr	r1, [pc, #52]	; (8001f3c <HAL_UART_Init+0xa8>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	212a      	movs	r1, #42	; 0x2a
 8001f16:	438a      	bics	r2, r1
 8001f18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fd9b 	bl	8002a68 <UART_CheckIdleState>
 8001f32:	0003      	movs	r3, r0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	ffffb7ff 	.word	0xffffb7ff

08001f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	1dbb      	adds	r3, r7, #6
 8001f4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2288      	movs	r2, #136	; 0x88
 8001f54:	589b      	ldr	r3, [r3, r2]
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d000      	beq.n	8001f5c <HAL_UART_Transmit+0x1c>
 8001f5a:	e090      	b.n	800207e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_UART_Transmit+0x2a>
 8001f62:	1dbb      	adds	r3, r7, #6
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e088      	b.n	8002080 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d109      	bne.n	8001f8e <HAL_UART_Transmit+0x4e>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d105      	bne.n	8001f8e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e078      	b.n	8002080 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2290      	movs	r2, #144	; 0x90
 8001f92:	2100      	movs	r1, #0
 8001f94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2288      	movs	r2, #136	; 0x88
 8001f9a:	2121      	movs	r1, #33	; 0x21
 8001f9c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fd9f 	bl	8000ae0 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1dba      	adds	r2, r7, #6
 8001faa:	2154      	movs	r1, #84	; 0x54
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1dba      	adds	r2, r7, #6
 8001fb4:	2156      	movs	r1, #86	; 0x56
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d108      	bne.n	8001fd8 <HAL_UART_Transmit+0x98>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e003      	b.n	8001fe0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe0:	e030      	b.n	8002044 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	0013      	movs	r3, r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	f000 fde4 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2288      	movs	r2, #136	; 0x88
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e03d      	b.n	8002080 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10b      	bne.n	8002022 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	05d2      	lsls	r2, r2, #23
 8002016:	0dd2      	lsrs	r2, r2, #23
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3302      	adds	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e007      	b.n	8002032 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2256      	movs	r2, #86	; 0x56
 8002036:	5a9b      	ldrh	r3, [r3, r2]
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b299      	uxth	r1, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2256      	movs	r2, #86	; 0x56
 8002042:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2256      	movs	r2, #86	; 0x56
 8002048:	5a9b      	ldrh	r3, [r3, r2]
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1c8      	bne.n	8001fe2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	0013      	movs	r3, r2
 800205a:	2200      	movs	r2, #0
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	f000 fdad 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d005      	beq.n	8002072 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2288      	movs	r2, #136	; 0x88
 800206a:	2120      	movs	r1, #32
 800206c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e006      	b.n	8002080 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2288      	movs	r2, #136	; 0x88
 8002076:	2120      	movs	r1, #32
 8002078:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
  }
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b008      	add	sp, #32
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	228c      	movs	r2, #140	; 0x8c
 800209c:	589b      	ldr	r3, [r3, r2]
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d000      	beq.n	80020a4 <HAL_UART_Receive+0x1c>
 80020a2:	e0d0      	b.n	8002246 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_UART_Receive+0x2a>
 80020aa:	1dbb      	adds	r3, r7, #6
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0c8      	b.n	8002248 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	015b      	lsls	r3, r3, #5
 80020be:	429a      	cmp	r2, r3
 80020c0:	d109      	bne.n	80020d6 <HAL_UART_Receive+0x4e>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d001      	beq.n	80020d6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0b8      	b.n	8002248 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2290      	movs	r2, #144	; 0x90
 80020da:	2100      	movs	r1, #0
 80020dc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	228c      	movs	r2, #140	; 0x8c
 80020e2:	2122      	movs	r1, #34	; 0x22
 80020e4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fcf8 	bl	8000ae0 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1dba      	adds	r2, r7, #6
 80020f8:	215c      	movs	r1, #92	; 0x5c
 80020fa:	8812      	ldrh	r2, [r2, #0]
 80020fc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1dba      	adds	r2, r7, #6
 8002102:	215e      	movs	r1, #94	; 0x5e
 8002104:	8812      	ldrh	r2, [r2, #0]
 8002106:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	429a      	cmp	r2, r3
 8002112:	d10d      	bne.n	8002130 <HAL_UART_Receive+0xa8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <HAL_UART_Receive+0x9e>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2260      	movs	r2, #96	; 0x60
 8002120:	494b      	ldr	r1, [pc, #300]	; (8002250 <HAL_UART_Receive+0x1c8>)
 8002122:	5299      	strh	r1, [r3, r2]
 8002124:	e02e      	b.n	8002184 <HAL_UART_Receive+0xfc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2260      	movs	r2, #96	; 0x60
 800212a:	21ff      	movs	r1, #255	; 0xff
 800212c:	5299      	strh	r1, [r3, r2]
 800212e:	e029      	b.n	8002184 <HAL_UART_Receive+0xfc>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_UART_Receive+0xcc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <HAL_UART_Receive+0xc2>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2260      	movs	r2, #96	; 0x60
 8002144:	21ff      	movs	r1, #255	; 0xff
 8002146:	5299      	strh	r1, [r3, r2]
 8002148:	e01c      	b.n	8002184 <HAL_UART_Receive+0xfc>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2260      	movs	r2, #96	; 0x60
 800214e:	217f      	movs	r1, #127	; 0x7f
 8002150:	5299      	strh	r1, [r3, r2]
 8002152:	e017      	b.n	8002184 <HAL_UART_Receive+0xfc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	429a      	cmp	r2, r3
 800215e:	d10d      	bne.n	800217c <HAL_UART_Receive+0xf4>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_UART_Receive+0xea>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2260      	movs	r2, #96	; 0x60
 800216c:	217f      	movs	r1, #127	; 0x7f
 800216e:	5299      	strh	r1, [r3, r2]
 8002170:	e008      	b.n	8002184 <HAL_UART_Receive+0xfc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2260      	movs	r2, #96	; 0x60
 8002176:	213f      	movs	r1, #63	; 0x3f
 8002178:	5299      	strh	r1, [r3, r2]
 800217a:	e003      	b.n	8002184 <HAL_UART_Receive+0xfc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2260      	movs	r2, #96	; 0x60
 8002180:	2100      	movs	r1, #0
 8002182:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002184:	2312      	movs	r3, #18
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	2160      	movs	r1, #96	; 0x60
 800218c:	5a52      	ldrh	r2, [r2, r1]
 800218e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	015b      	lsls	r3, r3, #5
 8002198:	429a      	cmp	r2, r3
 800219a:	d108      	bne.n	80021ae <HAL_UART_Receive+0x126>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e003      	b.n	80021b6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80021b6:	e03a      	b.n	800222e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	0013      	movs	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	2120      	movs	r1, #32
 80021c6:	f000 fcf9 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d005      	beq.n	80021da <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	228c      	movs	r2, #140	; 0x8c
 80021d2:	2120      	movs	r1, #32
 80021d4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e036      	b.n	8002248 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2212      	movs	r2, #18
 80021ea:	18ba      	adds	r2, r7, r2
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	4013      	ands	r3, r2
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	3302      	adds	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e00e      	b.n	800221c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2212      	movs	r2, #18
 8002208:	18ba      	adds	r2, r7, r2
 800220a:	8812      	ldrh	r2, [r2, #0]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4013      	ands	r3, r2
 8002210:	b2da      	uxtb	r2, r3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	225e      	movs	r2, #94	; 0x5e
 8002220:	5a9b      	ldrh	r3, [r3, r2]
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b299      	uxth	r1, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	225e      	movs	r2, #94	; 0x5e
 800222c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	225e      	movs	r2, #94	; 0x5e
 8002232:	5a9b      	ldrh	r3, [r3, r2]
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1be      	bne.n	80021b8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	228c      	movs	r2, #140	; 0x8c
 800223e:	2120      	movs	r1, #32
 8002240:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b008      	add	sp, #32
 800224e:	bd80      	pop	{r7, pc}
 8002250:	000001ff 	.word	0x000001ff

08002254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	b5b0      	push	{r4, r5, r7, lr}
 8002256:	b090      	sub	sp, #64	; 0x40
 8002258:	af00      	add	r7, sp, #0
 800225a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800225c:	231a      	movs	r3, #26
 800225e:	2220      	movs	r2, #32
 8002260:	189b      	adds	r3, r3, r2
 8002262:	19db      	adds	r3, r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	431a      	orrs	r2, r3
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	431a      	orrs	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4313      	orrs	r3, r2
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4ac1      	ldr	r2, [pc, #772]	; (800258c <UART_SetConfig+0x338>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002292:	430b      	orrs	r3, r1
 8002294:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4abc      	ldr	r2, [pc, #752]	; (8002590 <UART_SetConfig+0x33c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	0018      	movs	r0, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	68d9      	ldr	r1, [r3, #12]
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	0003      	movs	r3, r0
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4ab6      	ldr	r2, [pc, #728]	; (8002594 <UART_SetConfig+0x340>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d009      	beq.n	80022d4 <UART_SetConfig+0x80>
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4ab4      	ldr	r2, [pc, #720]	; (8002598 <UART_SetConfig+0x344>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d004      	beq.n	80022d4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d0:	4313      	orrs	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4ab0      	ldr	r2, [pc, #704]	; (800259c <UART_SetConfig+0x348>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	220f      	movs	r2, #15
 80022f2:	4393      	bics	r3, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	0003      	movs	r3, r0
 8002300:	430b      	orrs	r3, r1
 8002302:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4aa5      	ldr	r2, [pc, #660]	; (80025a0 <UART_SetConfig+0x34c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d131      	bne.n	8002372 <UART_SetConfig+0x11e>
 800230e:	4ba5      	ldr	r3, [pc, #660]	; (80025a4 <UART_SetConfig+0x350>)
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	2203      	movs	r2, #3
 8002314:	4013      	ands	r3, r2
 8002316:	2b03      	cmp	r3, #3
 8002318:	d01d      	beq.n	8002356 <UART_SetConfig+0x102>
 800231a:	d823      	bhi.n	8002364 <UART_SetConfig+0x110>
 800231c:	2b02      	cmp	r3, #2
 800231e:	d00c      	beq.n	800233a <UART_SetConfig+0xe6>
 8002320:	d820      	bhi.n	8002364 <UART_SetConfig+0x110>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <UART_SetConfig+0xd8>
 8002326:	2b01      	cmp	r3, #1
 8002328:	d00e      	beq.n	8002348 <UART_SetConfig+0xf4>
 800232a:	e01b      	b.n	8002364 <UART_SetConfig+0x110>
 800232c:	231b      	movs	r3, #27
 800232e:	2220      	movs	r2, #32
 8002330:	189b      	adds	r3, r3, r2
 8002332:	19db      	adds	r3, r3, r7
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e154      	b.n	80025e4 <UART_SetConfig+0x390>
 800233a:	231b      	movs	r3, #27
 800233c:	2220      	movs	r2, #32
 800233e:	189b      	adds	r3, r3, r2
 8002340:	19db      	adds	r3, r3, r7
 8002342:	2202      	movs	r2, #2
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e14d      	b.n	80025e4 <UART_SetConfig+0x390>
 8002348:	231b      	movs	r3, #27
 800234a:	2220      	movs	r2, #32
 800234c:	189b      	adds	r3, r3, r2
 800234e:	19db      	adds	r3, r3, r7
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e146      	b.n	80025e4 <UART_SetConfig+0x390>
 8002356:	231b      	movs	r3, #27
 8002358:	2220      	movs	r2, #32
 800235a:	189b      	adds	r3, r3, r2
 800235c:	19db      	adds	r3, r3, r7
 800235e:	2208      	movs	r2, #8
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e13f      	b.n	80025e4 <UART_SetConfig+0x390>
 8002364:	231b      	movs	r3, #27
 8002366:	2220      	movs	r2, #32
 8002368:	189b      	adds	r3, r3, r2
 800236a:	19db      	adds	r3, r3, r7
 800236c:	2210      	movs	r2, #16
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e138      	b.n	80025e4 <UART_SetConfig+0x390>
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8c      	ldr	r2, [pc, #560]	; (80025a8 <UART_SetConfig+0x354>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d131      	bne.n	80023e0 <UART_SetConfig+0x18c>
 800237c:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <UART_SetConfig+0x350>)
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	220c      	movs	r2, #12
 8002382:	4013      	ands	r3, r2
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d01d      	beq.n	80023c4 <UART_SetConfig+0x170>
 8002388:	d823      	bhi.n	80023d2 <UART_SetConfig+0x17e>
 800238a:	2b08      	cmp	r3, #8
 800238c:	d00c      	beq.n	80023a8 <UART_SetConfig+0x154>
 800238e:	d820      	bhi.n	80023d2 <UART_SetConfig+0x17e>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <UART_SetConfig+0x146>
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00e      	beq.n	80023b6 <UART_SetConfig+0x162>
 8002398:	e01b      	b.n	80023d2 <UART_SetConfig+0x17e>
 800239a:	231b      	movs	r3, #27
 800239c:	2220      	movs	r2, #32
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	19db      	adds	r3, r3, r7
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e11d      	b.n	80025e4 <UART_SetConfig+0x390>
 80023a8:	231b      	movs	r3, #27
 80023aa:	2220      	movs	r2, #32
 80023ac:	189b      	adds	r3, r3, r2
 80023ae:	19db      	adds	r3, r3, r7
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e116      	b.n	80025e4 <UART_SetConfig+0x390>
 80023b6:	231b      	movs	r3, #27
 80023b8:	2220      	movs	r2, #32
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	19db      	adds	r3, r3, r7
 80023be:	2204      	movs	r2, #4
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e10f      	b.n	80025e4 <UART_SetConfig+0x390>
 80023c4:	231b      	movs	r3, #27
 80023c6:	2220      	movs	r2, #32
 80023c8:	189b      	adds	r3, r3, r2
 80023ca:	19db      	adds	r3, r3, r7
 80023cc:	2208      	movs	r2, #8
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e108      	b.n	80025e4 <UART_SetConfig+0x390>
 80023d2:	231b      	movs	r3, #27
 80023d4:	2220      	movs	r2, #32
 80023d6:	189b      	adds	r3, r3, r2
 80023d8:	19db      	adds	r3, r3, r7
 80023da:	2210      	movs	r2, #16
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e101      	b.n	80025e4 <UART_SetConfig+0x390>
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a71      	ldr	r2, [pc, #452]	; (80025ac <UART_SetConfig+0x358>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d131      	bne.n	800244e <UART_SetConfig+0x1fa>
 80023ea:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <UART_SetConfig+0x350>)
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	2230      	movs	r2, #48	; 0x30
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	d01d      	beq.n	8002432 <UART_SetConfig+0x1de>
 80023f6:	d823      	bhi.n	8002440 <UART_SetConfig+0x1ec>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d00c      	beq.n	8002416 <UART_SetConfig+0x1c2>
 80023fc:	d820      	bhi.n	8002440 <UART_SetConfig+0x1ec>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <UART_SetConfig+0x1b4>
 8002402:	2b10      	cmp	r3, #16
 8002404:	d00e      	beq.n	8002424 <UART_SetConfig+0x1d0>
 8002406:	e01b      	b.n	8002440 <UART_SetConfig+0x1ec>
 8002408:	231b      	movs	r3, #27
 800240a:	2220      	movs	r2, #32
 800240c:	189b      	adds	r3, r3, r2
 800240e:	19db      	adds	r3, r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e0e6      	b.n	80025e4 <UART_SetConfig+0x390>
 8002416:	231b      	movs	r3, #27
 8002418:	2220      	movs	r2, #32
 800241a:	189b      	adds	r3, r3, r2
 800241c:	19db      	adds	r3, r3, r7
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e0df      	b.n	80025e4 <UART_SetConfig+0x390>
 8002424:	231b      	movs	r3, #27
 8002426:	2220      	movs	r2, #32
 8002428:	189b      	adds	r3, r3, r2
 800242a:	19db      	adds	r3, r3, r7
 800242c:	2204      	movs	r2, #4
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e0d8      	b.n	80025e4 <UART_SetConfig+0x390>
 8002432:	231b      	movs	r3, #27
 8002434:	2220      	movs	r2, #32
 8002436:	189b      	adds	r3, r3, r2
 8002438:	19db      	adds	r3, r3, r7
 800243a:	2208      	movs	r2, #8
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e0d1      	b.n	80025e4 <UART_SetConfig+0x390>
 8002440:	231b      	movs	r3, #27
 8002442:	2220      	movs	r2, #32
 8002444:	189b      	adds	r3, r3, r2
 8002446:	19db      	adds	r3, r3, r7
 8002448:	2210      	movs	r2, #16
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e0ca      	b.n	80025e4 <UART_SetConfig+0x390>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <UART_SetConfig+0x35c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <UART_SetConfig+0x212>
 8002458:	231b      	movs	r3, #27
 800245a:	2220      	movs	r2, #32
 800245c:	189b      	adds	r3, r3, r2
 800245e:	19db      	adds	r3, r3, r7
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e0be      	b.n	80025e4 <UART_SetConfig+0x390>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <UART_SetConfig+0x360>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d106      	bne.n	800247e <UART_SetConfig+0x22a>
 8002470:	231b      	movs	r3, #27
 8002472:	2220      	movs	r2, #32
 8002474:	189b      	adds	r3, r3, r2
 8002476:	19db      	adds	r3, r3, r7
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e0b2      	b.n	80025e4 <UART_SetConfig+0x390>
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <UART_SetConfig+0x364>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <UART_SetConfig+0x242>
 8002488:	231b      	movs	r3, #27
 800248a:	2220      	movs	r2, #32
 800248c:	189b      	adds	r3, r3, r2
 800248e:	19db      	adds	r3, r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e0a6      	b.n	80025e4 <UART_SetConfig+0x390>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3e      	ldr	r2, [pc, #248]	; (8002594 <UART_SetConfig+0x340>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d13e      	bne.n	800251e <UART_SetConfig+0x2ca>
 80024a0:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <UART_SetConfig+0x350>)
 80024a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	22c0      	movs	r2, #192	; 0xc0
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d027      	beq.n	8002502 <UART_SetConfig+0x2ae>
 80024b2:	22c0      	movs	r2, #192	; 0xc0
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d82a      	bhi.n	8002510 <UART_SetConfig+0x2bc>
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	4293      	cmp	r3, r2
 80024c0:	d011      	beq.n	80024e6 <UART_SetConfig+0x292>
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d822      	bhi.n	8002510 <UART_SetConfig+0x2bc>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <UART_SetConfig+0x284>
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	00d2      	lsls	r2, r2, #3
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00e      	beq.n	80024f4 <UART_SetConfig+0x2a0>
 80024d6:	e01b      	b.n	8002510 <UART_SetConfig+0x2bc>
 80024d8:	231b      	movs	r3, #27
 80024da:	2220      	movs	r2, #32
 80024dc:	189b      	adds	r3, r3, r2
 80024de:	19db      	adds	r3, r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e07e      	b.n	80025e4 <UART_SetConfig+0x390>
 80024e6:	231b      	movs	r3, #27
 80024e8:	2220      	movs	r2, #32
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	19db      	adds	r3, r3, r7
 80024ee:	2202      	movs	r2, #2
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e077      	b.n	80025e4 <UART_SetConfig+0x390>
 80024f4:	231b      	movs	r3, #27
 80024f6:	2220      	movs	r2, #32
 80024f8:	189b      	adds	r3, r3, r2
 80024fa:	19db      	adds	r3, r3, r7
 80024fc:	2204      	movs	r2, #4
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e070      	b.n	80025e4 <UART_SetConfig+0x390>
 8002502:	231b      	movs	r3, #27
 8002504:	2220      	movs	r2, #32
 8002506:	189b      	adds	r3, r3, r2
 8002508:	19db      	adds	r3, r3, r7
 800250a:	2208      	movs	r2, #8
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e069      	b.n	80025e4 <UART_SetConfig+0x390>
 8002510:	231b      	movs	r3, #27
 8002512:	2220      	movs	r2, #32
 8002514:	189b      	adds	r3, r3, r2
 8002516:	19db      	adds	r3, r3, r7
 8002518:	2210      	movs	r2, #16
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e062      	b.n	80025e4 <UART_SetConfig+0x390>
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <UART_SetConfig+0x344>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d157      	bne.n	80025d8 <UART_SetConfig+0x384>
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <UART_SetConfig+0x350>)
 800252a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800252c:	23c0      	movs	r3, #192	; 0xc0
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4013      	ands	r3, r2
 8002532:	22c0      	movs	r2, #192	; 0xc0
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <UART_SetConfig+0x368>
 800253a:	22c0      	movs	r2, #192	; 0xc0
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4293      	cmp	r3, r2
 8002540:	d843      	bhi.n	80025ca <UART_SetConfig+0x376>
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	4293      	cmp	r3, r2
 8002548:	d011      	beq.n	800256e <UART_SetConfig+0x31a>
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4293      	cmp	r3, r2
 8002550:	d83b      	bhi.n	80025ca <UART_SetConfig+0x376>
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <UART_SetConfig+0x30c>
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	0052      	lsls	r2, r2, #1
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <UART_SetConfig+0x328>
 800255e:	e034      	b.n	80025ca <UART_SetConfig+0x376>
 8002560:	231b      	movs	r3, #27
 8002562:	2220      	movs	r2, #32
 8002564:	189b      	adds	r3, r3, r2
 8002566:	19db      	adds	r3, r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e03a      	b.n	80025e4 <UART_SetConfig+0x390>
 800256e:	231b      	movs	r3, #27
 8002570:	2220      	movs	r2, #32
 8002572:	189b      	adds	r3, r3, r2
 8002574:	19db      	adds	r3, r3, r7
 8002576:	2202      	movs	r2, #2
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e033      	b.n	80025e4 <UART_SetConfig+0x390>
 800257c:	231b      	movs	r3, #27
 800257e:	2220      	movs	r2, #32
 8002580:	189b      	adds	r3, r3, r2
 8002582:	19db      	adds	r3, r3, r7
 8002584:	2204      	movs	r2, #4
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e02c      	b.n	80025e4 <UART_SetConfig+0x390>
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	cfff69f3 	.word	0xcfff69f3
 8002590:	ffffcfff 	.word	0xffffcfff
 8002594:	40008000 	.word	0x40008000
 8002598:	40008400 	.word	0x40008400
 800259c:	11fff4ff 	.word	0x11fff4ff
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40004400 	.word	0x40004400
 80025ac:	40004800 	.word	0x40004800
 80025b0:	40004c00 	.word	0x40004c00
 80025b4:	40005000 	.word	0x40005000
 80025b8:	40013c00 	.word	0x40013c00
 80025bc:	231b      	movs	r3, #27
 80025be:	2220      	movs	r2, #32
 80025c0:	189b      	adds	r3, r3, r2
 80025c2:	19db      	adds	r3, r3, r7
 80025c4:	2208      	movs	r2, #8
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e00c      	b.n	80025e4 <UART_SetConfig+0x390>
 80025ca:	231b      	movs	r3, #27
 80025cc:	2220      	movs	r2, #32
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	19db      	adds	r3, r3, r7
 80025d2:	2210      	movs	r2, #16
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e005      	b.n	80025e4 <UART_SetConfig+0x390>
 80025d8:	231b      	movs	r3, #27
 80025da:	2220      	movs	r2, #32
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	19db      	adds	r3, r3, r7
 80025e0:	2210      	movs	r2, #16
 80025e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4ac1      	ldr	r2, [pc, #772]	; (80028f0 <UART_SetConfig+0x69c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d005      	beq.n	80025fa <UART_SetConfig+0x3a6>
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4ac0      	ldr	r2, [pc, #768]	; (80028f4 <UART_SetConfig+0x6a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d000      	beq.n	80025fa <UART_SetConfig+0x3a6>
 80025f8:	e093      	b.n	8002722 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025fa:	231b      	movs	r3, #27
 80025fc:	2220      	movs	r2, #32
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	19db      	adds	r3, r3, r7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d015      	beq.n	8002634 <UART_SetConfig+0x3e0>
 8002608:	dc18      	bgt.n	800263c <UART_SetConfig+0x3e8>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d00d      	beq.n	800262a <UART_SetConfig+0x3d6>
 800260e:	dc15      	bgt.n	800263c <UART_SetConfig+0x3e8>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <UART_SetConfig+0x3c6>
 8002614:	2b02      	cmp	r3, #2
 8002616:	d005      	beq.n	8002624 <UART_SetConfig+0x3d0>
 8002618:	e010      	b.n	800263c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800261a:	f7ff f9e9 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 800261e:	0003      	movs	r3, r0
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002622:	e014      	b.n	800264e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002624:	4bb4      	ldr	r3, [pc, #720]	; (80028f8 <UART_SetConfig+0x6a4>)
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002628:	e011      	b.n	800264e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800262a:	f7ff f955 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 800262e:	0003      	movs	r3, r0
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002632:	e00c      	b.n	800264e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263a:	e008      	b.n	800264e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002640:	231a      	movs	r3, #26
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
        break;
 800264c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	2b00      	cmp	r3, #0
 8002652:	d100      	bne.n	8002656 <UART_SetConfig+0x402>
 8002654:	e135      	b.n	80028c2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265a:	4ba8      	ldr	r3, [pc, #672]	; (80028fc <UART_SetConfig+0x6a8>)
 800265c:	0052      	lsls	r2, r2, #1
 800265e:	5ad3      	ldrh	r3, [r2, r3]
 8002660:	0019      	movs	r1, r3
 8002662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002664:	f7fd fd4e 	bl	8000104 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	0013      	movs	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	189b      	adds	r3, r3, r2
 8002676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002678:	429a      	cmp	r2, r3
 800267a:	d305      	bcc.n	8002688 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	429a      	cmp	r2, r3
 8002686:	d906      	bls.n	8002696 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002688:	231a      	movs	r3, #26
 800268a:	2220      	movs	r2, #32
 800268c:	189b      	adds	r3, r3, r2
 800268e:	19db      	adds	r3, r3, r7
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e044      	b.n	8002720 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	4b96      	ldr	r3, [pc, #600]	; (80028fc <UART_SetConfig+0x6a8>)
 80026a4:	0052      	lsls	r2, r2, #1
 80026a6:	5ad3      	ldrh	r3, [r2, r3]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	69b8      	ldr	r0, [r7, #24]
 80026b4:	69f9      	ldr	r1, [r7, #28]
 80026b6:	f7fd fe9b 	bl	80003f0 <__aeabi_uldivmod>
 80026ba:	0002      	movs	r2, r0
 80026bc:	000b      	movs	r3, r1
 80026be:	0e11      	lsrs	r1, r2, #24
 80026c0:	021d      	lsls	r5, r3, #8
 80026c2:	430d      	orrs	r5, r1
 80026c4:	0214      	lsls	r4, r2, #8
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68b8      	ldr	r0, [r7, #8]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	1900      	adds	r0, r0, r4
 80026d8:	4169      	adcs	r1, r5
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f7fd fe82 	bl	80003f0 <__aeabi_uldivmod>
 80026ec:	0002      	movs	r2, r0
 80026ee:	000b      	movs	r3, r1
 80026f0:	0013      	movs	r3, r2
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d309      	bcc.n	8002712 <UART_SetConfig+0x4be>
 80026fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	035b      	lsls	r3, r3, #13
 8002704:	429a      	cmp	r2, r3
 8002706:	d204      	bcs.n	8002712 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e006      	b.n	8002720 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002712:	231a      	movs	r3, #26
 8002714:	2220      	movs	r2, #32
 8002716:	189b      	adds	r3, r3, r2
 8002718:	19db      	adds	r3, r3, r7
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800271e:	e0d0      	b.n	80028c2 <UART_SetConfig+0x66e>
 8002720:	e0cf      	b.n	80028c2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	429a      	cmp	r2, r3
 800272c:	d000      	beq.n	8002730 <UART_SetConfig+0x4dc>
 800272e:	e070      	b.n	8002812 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002730:	231b      	movs	r3, #27
 8002732:	2220      	movs	r2, #32
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d015      	beq.n	800276a <UART_SetConfig+0x516>
 800273e:	dc18      	bgt.n	8002772 <UART_SetConfig+0x51e>
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00d      	beq.n	8002760 <UART_SetConfig+0x50c>
 8002744:	dc15      	bgt.n	8002772 <UART_SetConfig+0x51e>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <UART_SetConfig+0x4fc>
 800274a:	2b02      	cmp	r3, #2
 800274c:	d005      	beq.n	800275a <UART_SetConfig+0x506>
 800274e:	e010      	b.n	8002772 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002750:	f7ff f94e 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002754:	0003      	movs	r3, r0
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002758:	e014      	b.n	8002784 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <UART_SetConfig+0x6a4>)
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800275e:	e011      	b.n	8002784 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002760:	f7ff f8ba 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8002764:	0003      	movs	r3, r0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002768:	e00c      	b.n	8002784 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002770:	e008      	b.n	8002784 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002776:	231a      	movs	r3, #26
 8002778:	2220      	movs	r2, #32
 800277a:	189b      	adds	r3, r3, r2
 800277c:	19db      	adds	r3, r3, r7
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
        break;
 8002782:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	2b00      	cmp	r3, #0
 8002788:	d100      	bne.n	800278c <UART_SetConfig+0x538>
 800278a:	e09a      	b.n	80028c2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <UART_SetConfig+0x6a8>)
 8002792:	0052      	lsls	r2, r2, #1
 8002794:	5ad3      	ldrh	r3, [r2, r3]
 8002796:	0019      	movs	r1, r3
 8002798:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800279a:	f7fd fcb3 	bl	8000104 <__udivsi3>
 800279e:	0003      	movs	r3, r0
 80027a0:	005a      	lsls	r2, r3, #1
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	18d2      	adds	r2, r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f7fd fca7 	bl	8000104 <__udivsi3>
 80027b6:	0003      	movs	r3, r0
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	d921      	bls.n	8002804 <UART_SetConfig+0x5b0>
 80027c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	025b      	lsls	r3, r3, #9
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d21c      	bcs.n	8002804 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	200e      	movs	r0, #14
 80027d0:	2420      	movs	r4, #32
 80027d2:	1903      	adds	r3, r0, r4
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	210f      	movs	r1, #15
 80027d8:	438a      	bics	r2, r1
 80027da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2207      	movs	r2, #7
 80027e4:	4013      	ands	r3, r2
 80027e6:	b299      	uxth	r1, r3
 80027e8:	1903      	adds	r3, r0, r4
 80027ea:	19db      	adds	r3, r3, r7
 80027ec:	1902      	adds	r2, r0, r4
 80027ee:	19d2      	adds	r2, r2, r7
 80027f0:	8812      	ldrh	r2, [r2, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1902      	adds	r2, r0, r4
 80027fc:	19d2      	adds	r2, r2, r7
 80027fe:	8812      	ldrh	r2, [r2, #0]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e05e      	b.n	80028c2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002804:	231a      	movs	r3, #26
 8002806:	2220      	movs	r2, #32
 8002808:	189b      	adds	r3, r3, r2
 800280a:	19db      	adds	r3, r3, r7
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e057      	b.n	80028c2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002812:	231b      	movs	r3, #27
 8002814:	2220      	movs	r2, #32
 8002816:	189b      	adds	r3, r3, r2
 8002818:	19db      	adds	r3, r3, r7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d015      	beq.n	800284c <UART_SetConfig+0x5f8>
 8002820:	dc18      	bgt.n	8002854 <UART_SetConfig+0x600>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d00d      	beq.n	8002842 <UART_SetConfig+0x5ee>
 8002826:	dc15      	bgt.n	8002854 <UART_SetConfig+0x600>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <UART_SetConfig+0x5de>
 800282c:	2b02      	cmp	r3, #2
 800282e:	d005      	beq.n	800283c <UART_SetConfig+0x5e8>
 8002830:	e010      	b.n	8002854 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002832:	f7ff f8dd 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002836:	0003      	movs	r3, r0
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800283a:	e014      	b.n	8002866 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <UART_SetConfig+0x6a4>)
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002840:	e011      	b.n	8002866 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002842:	f7ff f849 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8002846:	0003      	movs	r3, r0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800284a:	e00c      	b.n	8002866 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002852:	e008      	b.n	8002866 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002858:	231a      	movs	r3, #26
 800285a:	2220      	movs	r2, #32
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
        break;
 8002864:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02a      	beq.n	80028c2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <UART_SetConfig+0x6a8>)
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	5ad3      	ldrh	r3, [r2, r3]
 8002876:	0019      	movs	r1, r3
 8002878:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800287a:	f7fd fc43 	bl	8000104 <__udivsi3>
 800287e:	0003      	movs	r3, r0
 8002880:	001a      	movs	r2, r3
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	18d2      	adds	r2, r2, r3
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f7fd fc37 	bl	8000104 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b0f      	cmp	r3, #15
 800289e:	d90a      	bls.n	80028b6 <UART_SetConfig+0x662>
 80028a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	025b      	lsls	r3, r3, #9
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d205      	bcs.n	80028b6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	e005      	b.n	80028c2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80028b6:	231a      	movs	r3, #26
 80028b8:	2220      	movs	r2, #32
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	19db      	adds	r3, r3, r7
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	226a      	movs	r2, #106	; 0x6a
 80028c6:	2101      	movs	r1, #1
 80028c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2268      	movs	r2, #104	; 0x68
 80028ce:	2101      	movs	r1, #1
 80028d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	2200      	movs	r2, #0
 80028d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80028de:	231a      	movs	r3, #26
 80028e0:	2220      	movs	r2, #32
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	19db      	adds	r3, r3, r7
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b010      	add	sp, #64	; 0x40
 80028ee:	bdb0      	pop	{r4, r5, r7, pc}
 80028f0:	40008000 	.word	0x40008000
 80028f4:	40008400 	.word	0x40008400
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	0800306c 	.word	0x0800306c

08002900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	2208      	movs	r2, #8
 800290e:	4013      	ands	r3, r2
 8002910:	d00b      	beq.n	800292a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <UART_AdvFeatureConfig+0x144>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	2201      	movs	r2, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a43      	ldr	r2, [pc, #268]	; (8002a48 <UART_AdvFeatureConfig+0x148>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	d00b      	beq.n	800296e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a3b      	ldr	r2, [pc, #236]	; (8002a4c <UART_AdvFeatureConfig+0x14c>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	2204      	movs	r2, #4
 8002974:	4013      	ands	r3, r2
 8002976:	d00b      	beq.n	8002990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <UART_AdvFeatureConfig+0x150>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	2210      	movs	r2, #16
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <UART_AdvFeatureConfig+0x154>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	2220      	movs	r2, #32
 80029b8:	4013      	ands	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <UART_AdvFeatureConfig+0x158>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	2240      	movs	r2, #64	; 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <UART_AdvFeatureConfig+0x15c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	035b      	lsls	r3, r3, #13
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d10b      	bne.n	8002a1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <UART_AdvFeatureConfig+0x160>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	4013      	ands	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <UART_AdvFeatureConfig+0x164>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	ffff7fff 	.word	0xffff7fff
 8002a48:	fffdffff 	.word	0xfffdffff
 8002a4c:	fffeffff 	.word	0xfffeffff
 8002a50:	fffbffff 	.word	0xfffbffff
 8002a54:	ffffefff 	.word	0xffffefff
 8002a58:	ffffdfff 	.word	0xffffdfff
 8002a5c:	ffefffff 	.word	0xffefffff
 8002a60:	ff9fffff 	.word	0xff9fffff
 8002a64:	fff7ffff 	.word	0xfff7ffff

08002a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b092      	sub	sp, #72	; 0x48
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2290      	movs	r2, #144	; 0x90
 8002a74:	2100      	movs	r1, #0
 8002a76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a78:	f7fe f832 	bl	8000ae0 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2208      	movs	r2, #8
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d12d      	bne.n	8002aea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0391      	lsls	r1, r2, #14
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <UART_CheckIdleState+0x14c>)
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f000 f88e 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d022      	beq.n	8002aea <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aae:	2301      	movs	r3, #1
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	f383 8810 	msr	PRIMASK, r3
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2288      	movs	r2, #136	; 0x88
 8002ada:	2120      	movs	r1, #32
 8002adc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2284      	movs	r2, #132	; 0x84
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e060      	b.n	8002bac <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2204      	movs	r2, #4
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d146      	bne.n	8002b86 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	03d1      	lsls	r1, r2, #15
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <UART_CheckIdleState+0x14c>)
 8002b02:	9200      	str	r2, [sp, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f000 f859 	bl	8002bbc <UART_WaitOnFlagUntilTimeout>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d03b      	beq.n	8002b86 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b14:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	2301      	movs	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <UART_CheckIdleState+0x150>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f383 8810 	msr	PRIMASK, r3
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b46:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	228c      	movs	r2, #140	; 0x8c
 8002b76:	2120      	movs	r1, #32
 8002b78:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2284      	movs	r2, #132	; 0x84
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e012      	b.n	8002bac <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2288      	movs	r2, #136	; 0x88
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	228c      	movs	r2, #140	; 0x8c
 8002b92:	2120      	movs	r1, #32
 8002b94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2284      	movs	r2, #132	; 0x84
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b010      	add	sp, #64	; 0x40
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	01ffffff 	.word	0x01ffffff
 8002bb8:	fffffedf 	.word	0xfffffedf

08002bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bcc:	e051      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	d04e      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7fd ff84 	bl	8000ae0 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <UART_WaitOnFlagUntilTimeout+0x2e>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e051      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d03b      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d038      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d035      	beq.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d111      	bne.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f83c 	bl	8002c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2290      	movs	r2, #144	; 0x90
 8002c28:	2108      	movs	r1, #8
 8002c2a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2284      	movs	r2, #132	; 0x84
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e02c      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	401a      	ands	r2, r3
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d112      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 f81f 	bl	8002c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2290      	movs	r2, #144	; 0x90
 8002c62:	2120      	movs	r1, #32
 8002c64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2284      	movs	r2, #132	; 0x84
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e00f      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	425a      	negs	r2, r3
 8002c82:	4153      	adcs	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	001a      	movs	r2, r3
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d09e      	beq.n	8002bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8002caa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4926      	ldr	r1, [pc, #152]	; (8002d60 <UART_EndRxTransfer+0xc4>)
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f383 8810 	msr	PRIMASK, r3
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cda:	623b      	str	r3, [r7, #32]
  return(result);
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	491b      	ldr	r1, [pc, #108]	; (8002d64 <UART_EndRxTransfer+0xc8>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d118      	bne.n	8002d42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d10:	f3ef 8310 	mrs	r3, PRIMASK
 8002d14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2110      	movs	r1, #16
 8002d32:	438a      	bics	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	228c      	movs	r2, #140	; 0x8c
 8002d46:	2120      	movs	r1, #32
 8002d48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b00e      	add	sp, #56	; 0x38
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	fffffedf 	.word	0xfffffedf
 8002d64:	effffffe 	.word	0xeffffffe

08002d68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2284      	movs	r2, #132	; 0x84
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_UARTEx_DisableFifoMode+0x16>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e027      	b.n	8002dce <HAL_UARTEx_DisableFifoMode+0x66>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2284      	movs	r2, #132	; 0x84
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2288      	movs	r2, #136	; 0x88
 8002d8a:	2124      	movs	r1, #36	; 0x24
 8002d8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	438a      	bics	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2288      	movs	r2, #136	; 0x88
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2284      	movs	r2, #132	; 0x84
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	dfffffff 	.word	0xdfffffff

08002ddc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2284      	movs	r2, #132	; 0x84
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e02e      	b.n	8002e52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2284      	movs	r2, #132	; 0x84
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2288      	movs	r2, #136	; 0x88
 8002e00:	2124      	movs	r1, #36	; 0x24
 8002e02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	08d9      	lsrs	r1, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f854 	bl	8002ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2288      	movs	r2, #136	; 0x88
 8002e44:	2120      	movs	r1, #32
 8002e46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2284      	movs	r2, #132	; 0x84
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b004      	add	sp, #16
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2284      	movs	r2, #132	; 0x84
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e02f      	b.n	8002ed4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	; 0x84
 8002e78:	2101      	movs	r1, #1
 8002e7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2288      	movs	r2, #136	; 0x88
 8002e80:	2124      	movs	r1, #36	; 0x24
 8002e82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	438a      	bics	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f813 	bl	8002ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2288      	movs	r2, #136	; 0x88
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2284      	movs	r2, #132	; 0x84
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	f1ffffff 	.word	0xf1ffffff

08002ee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d108      	bne.n	8002f02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	226a      	movs	r2, #106	; 0x6a
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2268      	movs	r2, #104	; 0x68
 8002efc:	2101      	movs	r1, #1
 8002efe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f00:	e043      	b.n	8002f8a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f02:	260f      	movs	r6, #15
 8002f04:	19bb      	adds	r3, r7, r6
 8002f06:	2208      	movs	r2, #8
 8002f08:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f0a:	200e      	movs	r0, #14
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	2208      	movs	r2, #8
 8002f10:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	0e5b      	lsrs	r3, r3, #25
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	240d      	movs	r4, #13
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	2107      	movs	r1, #7
 8002f22:	400a      	ands	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	0f5b      	lsrs	r3, r3, #29
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	250c      	movs	r5, #12
 8002f32:	197b      	adds	r3, r7, r5
 8002f34:	2107      	movs	r1, #7
 8002f36:	400a      	ands	r2, r1
 8002f38:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f3a:	183b      	adds	r3, r7, r0
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	197a      	adds	r2, r7, r5
 8002f40:	7812      	ldrb	r2, [r2, #0]
 8002f42:	4914      	ldr	r1, [pc, #80]	; (8002f94 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f44:	5c8a      	ldrb	r2, [r1, r2]
 8002f46:	435a      	muls	r2, r3
 8002f48:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f4a:	197b      	adds	r3, r7, r5
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f52:	0019      	movs	r1, r3
 8002f54:	f7fd f960 	bl	8000218 <__divsi3>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	b299      	uxth	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	226a      	movs	r2, #106	; 0x6a
 8002f60:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f62:	19bb      	adds	r3, r7, r6
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	193a      	adds	r2, r7, r4
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f6c:	5c8a      	ldrb	r2, [r1, r2]
 8002f6e:	435a      	muls	r2, r3
 8002f70:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	f7fd f94c 	bl	8000218 <__divsi3>
 8002f80:	0003      	movs	r3, r0
 8002f82:	b299      	uxth	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2268      	movs	r2, #104	; 0x68
 8002f88:	5299      	strh	r1, [r3, r2]
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b005      	add	sp, #20
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	08003084 	.word	0x08003084
 8002f98:	0800308c 	.word	0x0800308c

08002f9c <__libc_init_array>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	4d0c      	ldr	r5, [pc, #48]	; (8002fd4 <__libc_init_array+0x38>)
 8002fa2:	4c0d      	ldr	r4, [pc, #52]	; (8002fd8 <__libc_init_array+0x3c>)
 8002fa4:	1b64      	subs	r4, r4, r5
 8002fa6:	10a4      	asrs	r4, r4, #2
 8002fa8:	42a6      	cmp	r6, r4
 8002faa:	d109      	bne.n	8002fc0 <__libc_init_array+0x24>
 8002fac:	2600      	movs	r6, #0
 8002fae:	f000 f821 	bl	8002ff4 <_init>
 8002fb2:	4d0a      	ldr	r5, [pc, #40]	; (8002fdc <__libc_init_array+0x40>)
 8002fb4:	4c0a      	ldr	r4, [pc, #40]	; (8002fe0 <__libc_init_array+0x44>)
 8002fb6:	1b64      	subs	r4, r4, r5
 8002fb8:	10a4      	asrs	r4, r4, #2
 8002fba:	42a6      	cmp	r6, r4
 8002fbc:	d105      	bne.n	8002fca <__libc_init_array+0x2e>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	00b3      	lsls	r3, r6, #2
 8002fc2:	58eb      	ldr	r3, [r5, r3]
 8002fc4:	4798      	blx	r3
 8002fc6:	3601      	adds	r6, #1
 8002fc8:	e7ee      	b.n	8002fa8 <__libc_init_array+0xc>
 8002fca:	00b3      	lsls	r3, r6, #2
 8002fcc:	58eb      	ldr	r3, [r5, r3]
 8002fce:	4798      	blx	r3
 8002fd0:	3601      	adds	r6, #1
 8002fd2:	e7f2      	b.n	8002fba <__libc_init_array+0x1e>
 8002fd4:	0800309c 	.word	0x0800309c
 8002fd8:	0800309c 	.word	0x0800309c
 8002fdc:	0800309c 	.word	0x0800309c
 8002fe0:	080030a0 	.word	0x080030a0

08002fe4 <memset>:
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	1882      	adds	r2, r0, r2
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	7019      	strb	r1, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
